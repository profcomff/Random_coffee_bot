from aiogram import exceptions, types
from aiogram.dispatcher import Dispatcher

from controllerBD.db_loader import Session
from controllerBD.models import MetInfo
from handlers.decorators import user_handlers
from handlers.user.add_username import check_username
from handlers.user.get_info_from_table import (
    get_full_user_info_by_id,
    get_holidays_status_from_db,
    get_id_from_user_info_table,
    get_user_data_from_db,
    get_user_status_from_db,
)
from handlers.user.new_member import get_gender_from_db, start_registration
from handlers.user.reviews import get_met_id_with_user_last_week
from handlers.user.work_with_date import date_from_db_to_message
from keyboards.user import *
from loader import bot, logger
from sendler import make_message


# @dp.errors_handler(exception=exceptions.RetryAfter)
async def exception_handler(update: types.Update, exception: exceptions.RetryAfter):
    await update.message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. " "–ü–æ–¥–æ–∂–¥–∏ 5 –º–∏–Ω—É—Ç")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} —Ñ–ª—É–¥–∏—Ç")
    return True


# @dp.message_handler(text=[menu_message, back_to_menu])
@user_handlers
async def main_menu(message: types.Message):
    """–í—ã–≤–æ–¥ –º–µ–Ω—é"""
    await bot.send_message(
        message.from_user.id, text="–ú–µ–Ω—é:", reply_markup=menu_markup(message)
    )


# @dp.message_handler(text=my_profile_message)
@user_handlers
async def send_profile(message: types.Message):
    """–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    await check_username(message)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG_ID {message.from_user.id} " f"–∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"
    )
    data = dict(get_user_data_from_db(message.from_user.id))
    gender_id = data["gender"]
    gender_status = get_gender_from_db(gender_id)
    data["gender"] = gender_status
    if data["birthday"] != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        data["birthday"] = date_from_db_to_message(data["birthday"])
    await bot.send_message(
        message.from_user.id,
        f"–ò–º—è: {data['name']}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birthday']}\n"
        f"–û —Å–µ–±–µ: {data['about']}\n"
        f"–ü–æ–ª: {data['gender']}",
        reply_markup=edit_profile_markup(),
    )


# @dp.message_handler(text=edit_profile_message)
@user_handlers
async def edit_profile(message: types.Message):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG_ID {message.from_user.id} "
        f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    )
    await start_registration(message)


# @dp.message_handler(text=about_bot_message)
async def about_bot(message: types.Message):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG_ID {message.from_user.id} " f"–∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"
    )
    await bot.send_message(
        message.from_user.id,
        """‚òïÔ∏è –ê–ª–æ—Ö–∞\, —ç—Ç–æ –±–æ—Ç –†–∞–Ω–¥–æ–º –ö–æ—Ñ–µ\!

–ë–æ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –æ—á–Ω–æ–π –∏–ª–∏ –æ–Ω–ª–∞–π–Ω\-–≤—Å—Ç—Ä–µ—á–∏\. –û–±—â–∞–π—Ç–µ—Å—å\, –¥–µ–ª–∏—Ç–µ—Å—å –∏–¥–µ—è–º–∏ –∏ —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –∫—Ä—É–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤\!

*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç\:*
‚Äî –ê–ª–≥–æ—Ä–∏—Ç–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä—É *–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é*\, —Å—Ç–∞—Ä–∞—è—Å—å –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤\.
‚Äî –ü–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã **—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å** –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ\.

*–ü—Ä–∞–≤–∏–ª–∞\:*
‚Äî *–•–æ—Ç–∏—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å\?* –í–∫–ª—é—á–∏—Ç–µ ¬´–ö–∞–Ω–∏–∫—É–ª—ã¬ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö \(1\-3 –Ω–µ–¥–µ–ª–∏\) *–¥–æ* —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä\.
‚Äî –ï—Å–ª–∏ –ø–∞—Ä–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞\, –∞ –≤—ã –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è ‚Äî *–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞* –∏\, –Ω–∞–ø—Ä–∏–º–µ—Ä\, –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É\. –ò–≥–Ω–æ—Ä ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\!
‚Äî –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–∞–Ω–¥–æ–º–∫–æ—Ñ–∏—Ç—å—Å—è\? –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é Telegram\.

*–°–æ–≤–µ—Ç—ã\:*
‚Äî –ò–¥–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\: *20‚Äì30 –º–∏–Ω—É—Ç* –∑–∞ —á–∞—à–∫–æ–π –∫–æ—Ñ–µ –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–æ–π\.
‚Äî *–û—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏* –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ, –Ω–æ –æ–Ω–ª–∞–π–Ω ‚Äî –¥–æ–ø—É—Å—Ç–∏–º–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞\.

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º, –∏–¥–µ—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º\: @MArzangulyan
–ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è –≤—Å—Ç—Ä–µ—á–∞ –±—É–¥–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π\! üòä
""",
        parse_mode="MarkdownV2",
        disable_web_page_preview=True,
    )


# @dp.message_handler(text=my_status_message)
@user_handlers
async def status_message(message: types.Message):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏"""
    await check_username(message)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG_ID {message.from_user.id} "
        f"–∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —É—á–∞—Å—Ç–∏—è"
    )
    user_row = get_user_data_from_db(message.from_user.id)
    status_row = get_user_status_from_db(user_row["id"])
    if status_row["status"] == 1:
        status = "–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–∞—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ"
    else:
        holidays_row = get_holidays_status_from_db(user_row["id"])
        till_value = holidays_row["till_date"]
        if till_value == "null" or till_value == "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫":
            holidays_till = "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"
        else:
            holidays_till = date_from_db_to_message(till_value)
        status = (
            f"–¢—ã –Ω–∞ –∫–∞–Ω–∏–∫—É–ª–∞—Ö –¥–æ {holidays_till}. "
            f"–í —ç—Ç–æ –≤—Ä–µ–º—è –ø–∞—Ä–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç. "
            f"–ü–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã —Å—Ç–∞—Ç—É—Å '–ê–∫—Ç–∏–≤–µ–Ω' "
            f"–±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ "
            f"–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, —Ç–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∏–∫—É–ª—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
            f"–≤—Ä—É—á–Ω—É—é –∫–Ω–æ–ø–∫–æ–π '–û—Ç–∫–ª—é—á–∏—Ç—å' –≤ –º–µ–Ω—é '–ö–∞–Ω–∏–∫—É–ª—ã'"
        )
    await bot.send_message(message.from_user.id, text=status)
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG_ID {message.from_user.id} "
        f"–ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —É—á–∞—Å—Ç–∏—è"
    )


# @dp.message_handler(text=my_pare_button)
@user_handlers
async def my_pare_check(message: types.Message):
    await check_username(message)
    user_id = get_id_from_user_info_table(message.from_user.id)
    met_id = get_met_id_with_user_last_week(user_id)
    if met_id is None:
        await bot.send_message(
            message.from_user.id, "–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏."
        )
    else:
        with Session() as db_session:
            users = (
                db_session.query(MetInfo).filter(MetInfo.id == met_id[0]).first().__dict__
            )
            if users["first_user_id"] == user_id:
                user_info = get_full_user_info_by_id(users["second_user_id"])
            else:
                user_info = get_full_user_info_by_id(users["first_user_id"])
            message_text = make_message(user_info)
        try:
            await bot.send_message(
                message.from_user.id,
                message_text,
                parse_mode="HTML",
                reply_markup=help_texts_markup(),
            )
        except Exception as error:
            logger.error(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} "
                f"–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—à–∏–±–∫–∞ {error}"
            )
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG_ID {message.from_user.id} "
        f"–ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π –ø–∞—Ä–µ"
    )


def register_user_handlers(dp: Dispatcher):
    dp.register_errors_handler(exception_handler, exception=exceptions.RetryAfter)
    dp.register_message_handler(main_menu, text=[menu_message, back_to_menu])
    dp.register_message_handler(send_profile, text=my_profile_message)
    dp.register_message_handler(edit_profile, text=edit_profile_message)
    dp.register_message_handler(about_bot, text=about_bot_message)
    dp.register_message_handler(status_message, text=my_status_message)
    dp.register_message_handler(my_pare_check, text=my_pare_button)
